// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["fullTextSearch", "filteredRelationCount"]
}

datasource db {
    provider = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    ext_expires_in    Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]

    isAdmin Boolean @default(false)

    role   Role?   @relation(fields: [roleId], references: [id], onDelete: SetNull)
    roleId String?

    violations        Violation[]
    violationMessages ViolationMessage[]

    permits           Permit[]
    permitMessages    PermitMessage[]
    permitApprovals   PermitApproval[]
    permitRejections  PermitRejection[]
    PermitRevocations PermitRevocation[]

    subscriptions PushSubscription[]
    notifications Notification[]

    files File[]

    announcements            Announcement[]
    announcementRatings      AnnouncementRating[]
    announcementComments     AnnouncementComment[]
    announcementCommentLikes AnnouncementCommentLike[]
    announcementReplies      AnnouncementReply[]
    announcementReplyLikes   AnnouncementReplyLike[]

    actions WebAction[]

    onlineSessions OnlineSession[]
}

model WebAction {
    id String @id @default(cuid())

    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String

    action  String
    path    String
    message String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model OnlineSession {
    id String @id @default(cuid())

    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String

    createdAt DateTime @default(now())
}

model Announcement {
    id String @id @default(cuid())

    title   String
    message String @db.Text

    attachments String[]

    author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
    authorId String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    comments AnnouncementComment[]
    ratings  AnnouncementRating[]
}

model AnnouncementRating {
    id String @id @default(cuid())

    announcement   Announcement @relation(fields: [announcementId], references: [id], onDelete: Cascade)
    announcementId String

    rating Int

    author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
    authorId String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model AnnouncementComment {
    id String @id @default(cuid())

    announcement   Announcement @relation(fields: [announcementId], references: [id], onDelete: Cascade)
    announcementId String

    message String @db.Text

    author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
    authorId String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    replies AnnouncementReply[]
    likes   AnnouncementCommentLike[]
}

model AnnouncementCommentLike {
    id String @id @default(cuid())

    comment   AnnouncementComment @relation(fields: [commentId], references: [id], onDelete: Cascade)
    commentId String

    author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
    authorId String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model AnnouncementReply {
    id String @id @default(cuid())

    comment   AnnouncementComment @relation(fields: [commentId], references: [id], onDelete: Cascade)
    commentId String

    message String @db.Text

    author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
    authorId String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    likes AnnouncementReplyLike[]
}

model AnnouncementReplyLike {
    id String @id @default(cuid())

    reply   AnnouncementReply @relation(fields: [replyId], references: [id], onDelete: Cascade)
    replyId String

    author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
    authorId String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Notification {
    id String @id @default(cuid())

    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId String

    title   String
    message String
    path    String

    read Boolean

    createdAt DateTime @default(now())
}

model File {
    id String @id @default(cuid())

    fileName String
    Key      String?

    user   User   @relation(fields: [userId], references: [id])
    userId String
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Role {
    id          String   @id @default(cuid())
    name        String
    color       String
    users       User[]
    permissions String[]
}

model Violation {
    id Int @id @default(autoincrement())

    name    String
    level   ViolationLevel @default(MINOR)
    details String         @db.Text

    violators String[]

    issuer   User?   @relation(fields: [issuerId], references: [id], onDelete: SetNull)
    issuerId String?

    attachments String[]
    messages    ViolationMessage[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

enum ViolationLevel {
    MINOR
    MAJOR_A
    MAJOR_B
    MAJOR_C
    MAJOR_D
}

model ViolationMessage {
    id String @id @default(cuid())

    violation   Violation @relation(fields: [violationId], references: [id], onDelete: Cascade)
    violationId Int

    message String @db.Text

    author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
    authorId String

    createdAt DateTime @default(now())
}

model PushSubscription {
    id String @id @default(cuid())

    endpoint   String  @unique
    expiration String?
    keys       Json

    user   User?   @relation(fields: [userId], references: [id])
    userId String?
}

model Permit {
    id Int @id @default(autoincrement())

    name    String
    details String

    pending Boolean

    approval   PermitApproval?
    rejection  PermitRejection?
    revocation PermitRevocation?

    author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
    authorId String

    attachments String[]
    messages    PermitMessage[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model PermitMessage {
    id String @id @default(cuid())

    permit   Permit @relation(fields: [permitId], references: [id], onDelete: Cascade)
    permitId Int

    message String @db.Text

    author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
    authorId String

    createdAt DateTime @default(now())
}

model PermitApproval {
    id String @id @default(cuid())

    permit   Permit @relation(fields: [permitId], references: [id], onDelete: Cascade)
    permitId Int    @unique

    comment String?

    author   User   @relation(fields: [authorId], references: [id])
    authorId String

    createdAt DateTime @default(now())
    expireAt  DateTime
}

model PermitRejection {
    id String @id @default(cuid())

    permit   Permit @relation(fields: [permitId], references: [id], onDelete: Cascade)
    permitId Int    @unique

    comment String?

    author   User   @relation(fields: [authorId], references: [id])
    authorId String

    createdAt DateTime @default(now())
}

model PermitRevocation {
    id String @id @default(cuid())

    permit   Permit @relation(fields: [permitId], references: [id], onDelete: Cascade)
    permitId Int    @unique

    comment String?

    author   User   @relation(fields: [authorId], references: [id])
    authorId String

    createdAt DateTime @default(now())
}
